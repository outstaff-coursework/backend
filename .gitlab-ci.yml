cache:
  paths:
    - deps_cache
    - venv/

default:
  image: python:3.9-slim
  before_script:
    - python --version
    - python -m venv venv
    - source venv/bin/activate
    - pip install -r requirements.txt --cache-dir deps_cache
    - export PYTHONPATH=$PYTHONPATH:pwd

stages:
  - Static Analysis
  - Test
  - Check DB mirations

flake8:
  stage: Static Analysis
  script:
    - flake8 --exclude venv --ignore=E501 .

pylint:
  stage: Static Analysis
  script:
    - pylint --disable=missing-docstring --ignore-paths venv --fail-under=8 --recursive yes .

mypy:
  stage: Static Analysis
  script:
    - mypy --ignore-missing-imports --explicit-package-bases .

pytest:
  stage: Test
  script:
    - pytest -v --cov-report term --cov-report xml
  artifacts:
    paths:
      - coverage.xml
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml

checkstaffdb:  
  stage: Check DB mirations
  image: docker:24.0.5
  variables:
    TBLS_IMAGE: ghcr.io/k1low/tbls:v1.72.0
    MIGRATIONS_FOLDER: app/services/staff/migrations
  services:
    - docker:24.0.5-dind
  before_script:
    - docker login -u "$CI_REGISTRY_USER" -p "$CI_REGISTRY_PASSWORD" $CI_REGISTRY
  script:
    - cd app/services/staff
    - docker image prune -f
    - docker compose build --no-cache
    - docker compose up -d
    - cd ../../..
    - docker run --rm --network="postgresql-network" -v $(pwd)/${MIGRATIONS_FOLDER}:/app liquibase/liquibase:4.25.0 --defaults-file=/app/liquibase.properties update
    - |
      cat <<EOF > .tbls.yml
      dsn: postgresql://admin:admin@postgresql:5432/admin?sslmode=disable
      docPath: dbdoc
      er:
        distance: 2
      lint:
        unrelatedTable:
          enabled: true
          allOrNothing: false
        duplicateRelations:
          enabled: true
        requireForeignKeyIndex:
          enabled: true
      exclude:
        - databasechangeloglock
        - databasechangelog
      EOF
    - docker run --rm --network "postgresql-network" -w /app -v $(pwd):/app $TBLS_IMAGE lint
    - docker run --rm --network "postgresql-network" -w /app -v $(pwd):/app $TBLS_IMAGE doc
  artifacts:
    paths:
      - dbdoc/schema.svg
